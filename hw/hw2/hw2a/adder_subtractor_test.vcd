$date
	Fri Sep 19 18:55:39 2025
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module adder_subtractor_test $end
$var wire 4 ! S_expected [3:0] $end
$var wire 4 " S_actual [3:0] $end
$var wire 1 # Cout $end
$var reg 4 $ A [3:0] $end
$var reg 4 % B [3:0] $end
$var reg 1 & Op $end
$scope module adder $end
$var wire 4 ' A [3:0] $end
$var wire 4 ( B [3:0] $end
$var wire 1 & Op $end
$var wire 4 ) S [3:0] $end
$var wire 1 # Cout $end
$var wire 1 * C3 $end
$var wire 1 + C2 $end
$var wire 1 , C1 $end
$scope module FA1 $end
$var wire 1 - A $end
$var wire 1 . B $end
$var wire 1 / Cin $end
$var wire 1 , Cout $end
$var wire 1 0 S $end
$upscope $end
$scope module FA2 $end
$var wire 1 1 A $end
$var wire 1 2 B $end
$var wire 1 , Cin $end
$var wire 1 + Cout $end
$var wire 1 3 S $end
$upscope $end
$scope module FA3 $end
$var wire 1 4 A $end
$var wire 1 5 B $end
$var wire 1 + Cin $end
$var wire 1 * Cout $end
$var wire 1 6 S $end
$upscope $end
$scope module FA4 $end
$var wire 1 7 A $end
$var wire 1 8 B $end
$var wire 1 * Cin $end
$var wire 1 # Cout $end
$var wire 1 9 S $end
$upscope $end
$upscope $end
$scope task check $end
$var reg 4 : a [3:0] $end
$var reg 4 ; actual [3:0] $end
$var reg 4 < b [3:0] $end
$var reg 4 = expected [3:0] $end
$var reg 1 > op $end
$upscope $end
$scope task test $end
$var reg 4 ? a [3:0] $end
$var reg 4 @ b [3:0] $end
$var reg 1 A op $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
xA
bx @
bx ?
x>
bx =
bx <
bx ;
bx :
09
08
07
06
05
04
03
02
01
00
0/
0.
0-
0,
0+
0*
b0 )
b0 (
b0 '
0&
b0 %
b0 $
0#
b0 "
b0 !
$end
#200
b1 @
b1 ?
0A
#400
b10 "
b10 )
13
1,
b10 !
1.
1-
b1 %
b1 (
b1 $
b1 '
#600
b10 =
b10 ;
b1 <
b1 :
0>
#800
1A
#1000
b0 !
1&
#1200
b0 =
1>
#1400
b101 @
b10 ?
0A
#1600
09
0*
0,
0+
16
10
b111 "
b111 )
13
b111 !
15
0-
11
0&
b101 %
b101 (
b10 $
b10 '
#1800
b111 =
b111 ;
b101 <
b10 :
0>
#2000
1A
#2200
b1101 !
1&
#2400
b1101 =
1>
#2600
b1100 @
b100 ?
0A
#2800
1#
1*
00
09
03
b0 "
b0 )
06
b0 !
0.
18
01
14
0&
b1100 %
b1100 (
b100 $
b100 '
#3000
b0 =
b0 ;
b1100 <
b100 :
0>
#3200
1A
#3400
b1000 !
1&
#3600
b1000 =
1>
#3800
b111 @
b111 ?
0A
#4000
13
16
1,
1+
b1110 "
b1110 )
19
0#
b1110 !
1.
12
08
1-
11
0&
b111 %
b111 (
b111 $
b111 '
#4200
b1110 =
b1110 ;
b111 <
b111 :
0>
#4400
1A
#4600
b0 !
1&
#4800
b0 =
1>
#5000
b100 @
#5200
06
0+
0,
10
b1011 "
b1011 )
13
b11 !
0.
02
b100 %
b100 (
#5400
b11 =
b1011 ;
b100 <
#5600
b0 @
#5800
09
0*
b111 "
b111 )
16
b111 !
05
b0 %
b0 (
#6000
b111 =
b111 ;
b0 <
#6200
b11 ?
#6400
b11 "
b11 )
06
b11 !
04
b11 $
b11 '
#6600
b11 =
b11 ;
b11 :
#6800
